components:
  securitySchemes:
    bearerAuth:
      type: apiKey
      name: Authorization
      in: header
      bearerFormat: JWT
  parameters:
    q:
      name: q
      in: query
      description: "Search term"
      schema:
        type: string
    sort:
      name: sort
      in: query
      description: "Sort by field"
      schema:
        type: string
        default: createdAt
    order:
      name: order
      in: query
      description: "Sort order"
      schema:
        type: string
        enum: [asc, desc]
        default: desc
    limit:
      name: limit
      in: query
      description: "Limit per page"
      schema:
        type: integer
        default: 10
    page:
      name: page
      in: query
      description: "Page number"
      schema:
        type: integer
        default: 1
  schemas:
    _id:
      type: object
      properties:
        _id:
          type: string
    userId:
      type:
      properties:
        userId:
          type: string
    date:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    accessToken:
      type: string
      description: Access token
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    responseSuccess:
      type: object
      properties:
        status:
          type: integer
          default: 200
        message:
          type: string
        data:
          type: object
        accessToken:
          $ref: "#/components/schemas/accessToken"
    responseSuccessPublic:
      type: object
      properties:
        status:
          type: integer
          default: 200
        message:
          type: string
        data:
          type: object
    error:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        description:
          type: string
        details:
          type: object
  responses:
    success:
      description: "OK"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseSuccess"
    badRequest:
      description: "Error: Bad Request"
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  status:
                    example: 400
                  message:
                    example: "Bad Request"
              - $ref: "#/components/schemas/error"
    unauthorized:
      description: "Error: Unauthorized"
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  status:
                    example: 401
                  message:
                    example: "Unauthorized"
              - $ref: "#/components/schemas/error"
    notFound:
      description: "Error: Not Found"
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  status:
                    example: 404
                  message:
                    example: "Not Found"
              - $ref: "#/components/schemas/error"

    internalServerError:
      description: "Error: Internal Server Error"
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  status:
                    example: 500
                  message:
                    example: "Internal Server Error"
              - $ref: "#/components/schemas/error"
