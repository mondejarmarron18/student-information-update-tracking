"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const mockApiSuccess = () => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve) => setTimeout(() => resolve({ data: "API Data Success" }), 100));
});
// Mocking a failing API call
const mockApiFailure = () => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((_, reject) => setTimeout(() => reject(new Error("API Error!")), 100));
});
jest.mock("axios");
describe("x8tAsync and x8tSync functions", () => {
    // Success case test for async API call
    it("x8tAsync: should return the result when the API call succeeds", () => __awaiter(void 0, void 0, void 0, function* () {
        const { result, error } = yield (0, _1.x8tAsync)(mockApiSuccess);
        expect({ result, error }).toEqual({
            result: { data: "API Data Success" },
            error: null,
        });
    }));
    // Error case test for async API call
    it("x8tAsync: should return the error when the API call fails", () => __awaiter(void 0, void 0, void 0, function* () {
        const { result, error } = yield (0, _1.x8tAsync)(mockApiFailure);
        expect({ result, error }).toEqual({
            result: null,
            error: new Error("API Error!"),
        });
    }));
    // Success case test for async function
    it("x8tAsync: should return the result when the async function succeeds", () => __awaiter(void 0, void 0, void 0, function* () {
        const successFn = () => __awaiter(void 0, void 0, void 0, function* () { return "Operation Successful!"; });
        const { result, error } = yield (0, _1.x8tAsync)(successFn);
        expect({ result, error }).toEqual({
            result: "Operation Successful!",
            error: null,
        });
    }));
    // Error case test for async function
    it("x8tAsync: should return the error when the async function throws an error", () => __awaiter(void 0, void 0, void 0, function* () {
        const errorFn = () => __awaiter(void 0, void 0, void 0, function* () {
            throw new Error("Something went wrong!");
        });
        const { result, error } = yield (0, _1.x8tAsync)(errorFn);
        expect({ result, error }).toEqual({
            result: null,
            error: new Error("Something went wrong!"),
        });
    }));
    // Test synchronous function success
    it("x8tSync: should return the result when a synchronous function succeeds", () => {
        const syncSuccessFn = () => "Synchronous Success";
        const { result, error } = (0, _1.x8tSync)(syncSuccessFn);
        expect({ result, error }).toEqual({
            result: "Synchronous Success",
            error: null,
        });
    });
    // Test synchronous function error
    it("x8tSync: should return the error when a synchronous function throws an error", () => {
        const syncErrorFn = () => {
            throw new Error("Sync Error!");
        };
        const { result, error } = (0, _1.x8tSync)(syncErrorFn);
        expect({ result, error }).toEqual({
            result: null,
            error: new Error("Sync Error!"),
        });
    });
    // Test synchronous function execution time
    it("x8tSync: should return the execution time when a synchronous function is executed", () => {
        const syncSuccessFn = () => "Synchronous Success";
        const { executionTime } = (0, _1.x8tSync)(syncSuccessFn);
        expect(executionTime).toMatch(/^[0-9]+ms$/);
    });
});
