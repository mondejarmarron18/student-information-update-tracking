"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.x8tSync = exports.x8tAsync = void 0;
const logExecution = (fnName, executionTime, error) => {
    const functionName = fnName || "anonymous";
    const status = error ? "failed" : "succeeded";
    const roundedTime = Math.round(executionTime);
    const message = `Function "${functionName}" ${status} in ${roundedTime}ms`;
    if (error) {
        console.error(message);
        console.error(error);
    }
    else {
        console.log(message);
    }
};
// Asynchronous function
const x8tAsync = (fn, options) => __awaiter(void 0, void 0, void 0, function* () {
    const start = performance.now();
    const log = (success, error) => {
        const end = performance.now();
        const fnName = typeof fn === "function" ? fn.name || "anonymous" : "promise";
        if (options === null || options === void 0 ? void 0 : options.log) {
            logExecution(fnName, end - start, success ? undefined : error);
        }
        return Math.round(end - start);
    };
    try {
        const result = typeof fn === "function" ? yield fn() : yield fn;
        const executionTime = log(true);
        return {
            result,
            error: null,
            executionTime: `${executionTime}ms`,
        };
    }
    catch (error) {
        const executionTime = log(true);
        return {
            result: null,
            error,
            executionTime: `${executionTime}ms`,
        };
    }
});
exports.x8tAsync = x8tAsync;
// Synchronous function
const x8tSync = (fn, options) => {
    const start = performance.now();
    const log = (success, error) => {
        const end = performance.now();
        const fnName = fn.name || "anonymous";
        if (options === null || options === void 0 ? void 0 : options.log)
            logExecution(fnName, end - start, success ? undefined : error);
        return Math.round(end - start);
    };
    try {
        const result = fn();
        const executionTime = log(true);
        return {
            result,
            error: null,
            executionTime: `${executionTime}ms`,
        };
    }
    catch (error) {
        const end = performance.now();
        const executionTime = log(true);
        return {
            result: null,
            error,
            executionTime: `${executionTime}ms`,
        };
    }
};
exports.x8tSync = x8tSync;
